- hosts: apic
  connection: local
  gather_facts: false
  collections:
  - cisco.aci

  vars:
    apic_info: &apic_info
      host:           "{{ ansible_host }}" 
      user:           "{{ ansible_user }}" 
      password:       "{{ ansible_password }}" 
      validate_certs: "{{ validate_certs }}"
      use_ssl:        "{{ use_ssl }}"
    
    var_state: &var_state
      state: "{{ state_all if state_all is defined else item.state if item.state is defined else 'present' }}"
 
  vars_files: tenant_vars.yml

  tasks:
  # Tenants
  - name: task1 - Tenant
    cisco.aci.aci_tenant:
      <<: *apic_info
      tenant: "{{ tenant.name }}"
      state:  "{{ state_all if state_all is defined else tenant.state if tenant.state is defined else 'present' }}"
    register: task_tenant
    tags: always, tn-task1, tenant

  # Tenants > (tenant) > Networking > VRFs
  - name: task2 - VRF
    cisco.aci.aci_vrf:
      <<: *apic_info
      <<: *var_state
      tenant: "{{ tenant.name }}"
      vrf:    "{{ item.name }}"
    loop: "{{ vrfs }}"
    when: task_tenant.current
    tags: tn-task2, vrf

  # Tenants > (tenant) > Networking > Bridge Domains
  - name: task3 - Bridge Domains
    cisco.aci.aci_bd:
      <<: *apic_info
      <<: *var_state
      tenant: "{{ tenant.name }}"
      vrf:    "{{ item.vrf }}"
      bd:     "{{ item.name }}"
    loop: "{{ bridge_domains }}"
    when: task_tenant.current
    tags: tn-task3, bd

  # Tenants > (tenant) > Networking > Bridge Domains > (bd) > Subnets
  - name: task4 - Bridge Domain Subnets
    cisco.aci.aci_bd_subnet:
      <<: *apic_info
      <<: *var_state
      tenant:  "{{ tenant.name }}"
      bd:      "{{ item.bd }}"
      gateway: "{{ item.subnet.split('/') | first }}"
      mask:    "{{ item.subnet.split('/') | last }}"
      scope:   "{{ item.scope }}"
    loop: "{{ subnets }}"
    when: task_tenant.current
    tags: tn-task4, subnet

  # Tenants > (tenant) > Application Profiles
  - name: task5 - Application Profile
    cisco.aci.aci_ap:
      <<: *apic_info
      <<: *var_state
      tenant: "{{ tenant.name }}"
      ap:     "{{ item.name }}"
    loop: "{{ app_profiles }}"
    when: task_tenant.current
    tags: tn-task5, ap

  # Tenants > (tenant) > Application Profiles > (ap) > Application EPGs
  - name: task6 - EPG
    cisco.aci.aci_epg:
      <<: *apic_info
      <<: *var_state
      tenant: "{{ tenant.name }}"
      bd:     "{{ item.bd }}"
      ap:     "{{ item.ap }}"
      epg:    "{{ item.name }}"
    with_items: "{{ epgs }}"
    when: task_tenant.current
    tags: tn-task6, epg

  # Tenants > (tenant) > Application Profiles > (ap) > Application EPGs > (epg) > Domains
  - name: task7a - EPG to Physical Domain
    cisco.aci.aci_epg_to_domain:
      <<: *apic_info
      <<: *var_state
      tenant:      "{{ tenant.name }}"
      ap:          "{{ item.ap }}"
      epg:         "{{ item.name }}"
      domain:      "{{ item.domain }}"
      domain_type: "{{ domains[item.domain].domain_type }}"
    with_items: "{{ epgs }}"
    when: 
    - task_tenant.current
    - domains[item.domain].domain_type == "phys"
    tags: tn-task7, bind_domain

  # Tenants > (tenant) > Application Profiles > (ap) > Application EPGs > (epg) > Domains
  - name: task7b - EPG to VMM Domain
    cisco.aci.aci_epg_to_domain:
      <<: *apic_info
      <<: *var_state
      tenant:      "{{ tenant.name }}"
      ap:          "{{ item.ap }}"
      epg:         "{{ item.name }}"
      domain:      "{{ item.domain }}"
      domain_type: "{{ domains[item.domain].domain_type }}"
      vm_provider: "{{ domains[item.domain].vm_provider }}"
    with_items: "{{ epgs }}"
    when: 
    - task_tenant.current 
    - domains[item.domain].domain_type == "vmm"
    tags: tn-task7, bind_domain