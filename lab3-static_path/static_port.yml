- hosts: apic
  connection: local
  gather_facts: no

  vars:
    apic_info: &apic_info
      host:           "{{ ansible_host }}" 
      user:           "{{ ansible_user }}" 
      password:       "{{ ansible_password }}" 
      validate_certs: "{{ validate_certs }}"
      use_ssl:        "{{ use_ssl }}"
    
    var_state: &var_state
      state: "{{ state_all if state_all is defined else item.state if item.state is defined else 'present' }}"
 
  vars_files: static_port_vars.yml

  tasks:
  - name: task1 - querying the tenant for pre-checking
    cisco.aci.aci_tenant:
      <<: *apic_info
      tenant: "{{ tenant.name }}"
      state:  "query"
    register: tenant_state
    tags: always

  - name: task2 - pre-checking for Tenant
    ansible.builtin.assert:
      that:        "tenant_state.current"
      fail_msg:    "no the tenant exists"
      success_msg: "the tenant exists"
    tags: always

  - name: task3 - querying EPGs for pre-checking
    cisco.aci.aci_epg:
      <<: *apic_info
      tenant: "{{ tenant.name }}"
      bd:     "{{ item.bd }}"
      ap:     "{{ item.ap }}"
      epg:    "{{ item.name }}"
      state:  "query"
    with_items: "{{ epgs }}"
    register: query_result1
    tags: always

  - name: task4 - set variable for pre-checking
    set_fact:
      existing_epgs: "{{ query_result1 | json_query('results[].current[].fvAEPg.attributes.{dn:dn}') }}"
  
  # - name: debug - existing EPGs
  #   debug: var=fvAEPg

  # - name: debug - EPGs you will create
  #   debug: var=epgs

  - name: task5 - pre-checking for EPGs
    ansible.builtin.assert:
      that:        existing_epgs | length == epgs | length
      fail_msg:    "Some EPG is not existing"
      success_msg: "All EPG is existing"
    tags: always

  - name: task6 - querying static ports for pre-checking
    cisco.aci.aci_static_binding_to_epg:
      <<: *apic_info
      state: query
      tenant:           "{{ tenant.name }}"
      ap:               "{{ item.ap }}"
      epg:              "{{ item.epg }}"
      encap_id:         "{{ item.encap }}"
      deploy_immediacy: "{{ item.immediacy }}"
      interface_mode:   "{{ item.mode }}"
      interface_type:   "{{ item.type }}"
      pod_id:           "{{ item.pod }}"
      leafs:            "{{ item.leaf }}"
      interface:        "{{ item.interface }}"
    with_items: "{{ static_paths }}"
    register: query_result2
    tags: always

  - name: task7 - set variable for pre-checking
    set_fact: 
      existing_static_paths: "{{ query_result2 | json_query('results[].current[].{fvRsPathAtt:fvRsPathAtt}') }}"
    tags: always

  # - name: debug - query results
  #   debug: msg="{{ query_result2 }}"

  # - name: debug - existing static paths from results
  #   debug: msg="{{ existing_static_paths }}"

  # - name: debug - the number of static paths from results
  #   debug: msg="{{ existing_static_paths | length }}"

  - name: task8 - pre-checking for static ports
    ansible.builtin.assert:
      that: existing_static_paths | length == 0
      fail_msg:    stopped executing tasks forcefully because EPGs you intend to create is already existing
      success_msg: no static bindings existing
    tags: always
    
  - name: task10 - binding static port to EPG
    cisco.aci.aci_static_binding_to_epg:
      <<: *apic_info
      <<: *var_state
      tenant:           "{{ tenant.name }}"
      ap:               "{{ item.ap }}"
      epg:              "{{ item.epg }}"
      encap_id:         "{{ item.encap }}"
      deploy_immediacy: "{{ item.immediacy }}"
      interface_mode:   "{{ item.mode }}"
      interface_type:   "{{ item.type }}"
      pod_id:           "{{ item.pod }}"
      leafs:            "{{ item.leaf }}"
      interface:        "{{ item.interface }}"
    with_items: "{{ static_paths }}"